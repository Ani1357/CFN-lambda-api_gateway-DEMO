AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: 'Serverless website

  '
Parameters:
  BucketName:
    Description: Enter Bucket Name
    Type: String
    AllowedPattern: ^[a-z0-9]+$
    Default: democicdlambda
  apiGatewayStageName:
    Type: String
    AllowedPattern: ^[a-z0-9]+$
    Default: quotes
  lambdaFunctionName:
    Type: String
    Default: myquoteslambdafunction
Conditions:
  HasBucketName:
    Fn::Not:
    - Fn::Equals:
      - Ref: BucketName
      - ''
Resources:
  Bucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName:
        Fn::If:
        - HasBucketName
        - Ref: BucketName
        - Ref: AWS::NoValue
  QuotesFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: s3://quotesappdemosls/01cc1d2b383e688a919c9e8360cdd35a
      Handler: main.quotesfunc
      Runtime: python3.6
      Timeout: 3
      FunctionName:
        Ref: lambdaFunctionName
      Role:
        Fn::GetAtt:
        - lambdaIAMRole
        - Arn
  lambdaIAMRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Action:
          - sts:AssumeRole
          Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
      Policies:
      - PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Action:
            - logs:CreateLogGroup
            - logs:CreateLogStream
            - logs:PutLogEvents
            Effect: Allow
            Resource:
            - Fn::Sub: arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/${lambdaFunctionName}:*
        PolicyName: lambda
  lambdaLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName:
        Fn::Sub: /aws/lambda/${lambdaFunctionName}
      RetentionInDays: 90
  lambdaApiGatewayInvoke:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName:
        Fn::GetAtt:
        - QuotesFunction
        - Arn
      Principal: apigateway.amazonaws.com
      SourceArn:
        Fn::Sub: arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${QuotesAPI}/*/GET/
  QuotesAPI:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: quotesapi
      Description: My Quotes Api
  apiGatewayDeployment:
    Type: AWS::ApiGateway::Deployment
    DependsOn:
    - apiGatewayRootMethod
    Properties:
      RestApiId:
        Ref: QuotesAPI
      StageName:
        Ref: apiGatewayStageName
  apiGatewayRootMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: NONE
      HttpMethod: POST
      Integration:
        IntegrationHttpMethod: POST
        Type: AWS
        Uri:
          Fn::Sub:
          - arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${lambdaArn}/invocations
          - lambdaArn:
              Fn::GetAtt:
              - QuotesFunction
              - Arn
        IntegrationResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: '''Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'''
            method.response.header.Access-Control-Allow-Methods: '''POST,OPTIONS'''
            method.response.header.Access-Control-Allow-Origin: '''*'''
            method.response.header.Access-Control-Allow-Credentials: '''true'''
          ResponseTemplates:
            application/json: ''
        PassthroughBehavior: WHEN_NO_MATCH
      ResourceId:
        Fn::GetAtt:
        - QuotesAPI
        - RootResourceId
      RestApiId:
        Ref: QuotesAPI
      MethodResponses:
      - StatusCode: 200
        ResponseModels:
          application/json: Empty
        ResponseParameters:
          method.response.header.Access-Control-Allow-Headers: false
          method.response.header.Access-Control-Allow-Methods: false
          method.response.header.Access-Control-Allow-Origin: false
          method.response.header.Access-Control-Allow-Credentials: false
  OptionsMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: NONE
      RestApiId:
        Ref: QuotesAPI
      ResourceId:
        Fn::GetAtt:
        - QuotesAPI
        - RootResourceId
      HttpMethod: OPTIONS
      Integration:
        IntegrationResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: '''Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'''
            method.response.header.Access-Control-Allow-Methods: '''POST,OPTIONS'''
            method.response.header.Access-Control-Allow-Origin: '''*'''
            method.response.header.Access-Control-Allow-Credentials: '''true'''
          ResponseTemplates:
            application/json: ''
        PassthroughBehavior: WHEN_NO_MATCH
        RequestTemplates:
          application/json: '{"statusCode": 200}'
        Type: MOCK
      MethodResponses:
      - StatusCode: 200
        ResponseModels:
          application/json: Empty
        ResponseParameters:
          method.response.header.Access-Control-Allow-Headers: false
          method.response.header.Access-Control-Allow-Methods: false
          method.response.header.Access-Control-Allow-Origin: false
          method.response.header.Access-Control-Allow-Credentials: false
